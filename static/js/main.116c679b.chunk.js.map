{"version":3,"sources":["Components/YouTube/video-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["VideoList","allVids","this","props","videos","map","vid","i","vidId","id","videoId","vidTitle","snippet","title","embedUrl","className","key","src","Component","App","state","url","URL","search","URLSearchParams","part","process","type","channelId","maxResults","fetch","then","data","json","response","setState","items","console","log","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mSAwBeA,G,uLAnBX,IAAMC,EAAUC,KAAKC,MAAMC,OAAOC,KAAI,SAACC,EAAKC,GAC1C,IAAMC,EAAQF,EAAIG,GAAGC,QACfC,EAAWL,EAAIM,QAAQC,MACvBC,EAAQ,wCAAoCN,GAClD,OACE,yBAAKO,UAAU,iBACb,4BAAQC,IAAKT,EAAGU,IAAKH,EAAUD,MAAOF,QAK5C,OACE,yBAAKI,UAAU,eACZd,O,GAfeiB,cCyCTC,G,kBArCb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXhB,OAAQ,IAJE,E,iFAOM,IAAD,OACbiB,EAAM,IAAIC,IAAI,gDAClBD,EAAIE,OAAS,IAAIC,gBAAgB,CAC/BC,KAAM,UACNT,IAfMU,0CAgBNC,KAAM,QACNC,UAhBY,2BAiBZC,WAAY,IAGdC,MAAMT,GACHU,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAAE/B,OAAQ8B,EAASE,QACjCC,QAAQC,IAAI,EAAKlB,MAAMhB,WAExBmC,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,Q,+BAGpB,IACApC,EAAWF,KAAKkB,MAAhBhB,OAER,OACE,6BACE,kBAAC,EAAD,CAAWA,OAAQA,S,GAhCTc,cCMEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdf,OAAM,SAAAgB,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.116c679b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './video-list.styles.scss';\n\nclass VideoList extends Component {\n  render(){\n    const allVids = this.props.videos.map((vid, i) => {\n      const vidId = vid.id.videoId;\n      const vidTitle = vid.snippet.title;\n      const embedUrl = `https://www.youtube.com/embed/${vidId}`;\n      return (\n        <div className=\"video-wrapper\">\n          <iframe key={i} src={embedUrl} title={vidTitle}></iframe>\n        </div>\n      )\n    })\n\n    return (\n      <div className=\"video-group\">\n        {allVids}\n      </div>\n    )\n  }\n}\n\nexport default VideoList;","import React, { Component } from 'react';\nimport VideoList from './Components/YouTube/video-list.component';\nimport './App.css';\nconst key = process.env.REACT_APP_GOOGLE_API_KEY;\nconst channelID = 'UCNrawkC_bE67IG8SaJpQMgw';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      videos: []\n    }\n  }\n  componentDidMount(){\n    let url = new URL('https://www.googleapis.com/youtube/v3/search');\n    url.search = new URLSearchParams({\n      part: 'snippet',\n      key: key,\n      type: 'video',\n      channelId: channelID,\n      maxResults: 6\n    })\n\n    fetch(url)\n      .then(data => data.json())\n      .then(response => {\n        this.setState({ videos: response.items })\n        console.log(this.state.videos)\n      })\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    const { videos } = this.state;\n\n    return (\n      <div>\n        <VideoList videos={videos} />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}